#include <stdio.h>
#include <string.h>
#include <ctype.h>

char stack[100]; int top = -1;

int prec(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

void push(char c) { stack[++top] = c; }
char pop() { return stack[top--]; }
char peek() { return stack[top]; }

void reverse(char* str) {
    int n = strlen(str);
    for (int i = 0; i < n/2; i++) {
        char t = str[i]; str[i] = str[n-1-i]; str[n-1-i] = t;
    }
}

void swapParens(char* str) {
    for (int i = 0; str[i]; i++) {
        if (str[i] == '(') str[i] = ')';
        else if (str[i] == ')') str[i] = '(';
    }
}

void infixToPostfix(char* exp, char* res) {
    int k = 0;
    for (int i = 0; exp[i]; i++) {
        char c = exp[i];
        if (isalnum(c)) res[k++] = c;
        else if (c == '(') push(c);
        else if (c == ')') {
            while (top != -1 && peek() != '(') res[k++] = pop();
            pop(); // remove '('
        } else {
            while (top != -1 && prec(c) <= prec(peek())) res[k++] = pop();
            push(c);
        }
    }
    while (top != -1) res[k++] = pop();
    res[k] = '\0';
}

void infixToPrefix(char* exp, char* res) {
    reverse(exp);
    swapParens(exp);
    infixToPostfix(exp, res);
    reverse(res);
}

int main() {
    char infix[100] = "(A+B)*C", postfix[100], prefix[100];
    infixToPostfix(infix, postfix);
    top = -1;
    infixToPrefix(infix, prefix);
    printf("Postfix: %s\n", postfix);
    printf("Prefix: %s\n", prefix);
    return 0;
}
