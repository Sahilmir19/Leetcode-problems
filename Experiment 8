#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100

// Stack implementation
char stack[MAX];
int top = -1;

void push(char ch) {
    if (top < MAX - 1) stack[++top] = ch;
}

char pop() {
    if (top >= 0) return stack[top--];
    return '\0'; // underflow
}

char peek() {
    return (top >= 0) ? stack[top] : '\0';
}

int isMatchingPair(char open, char close) {
    return (open == '(' && close == ')') ||
           (open == '{' && close == '}') ||
           (open == '[' && close == ']');
}

int isBalanced(char* expr) {
    for (int i = 0; expr[i] != '\0'; i++) {
        char ch = expr[i];
        if (ch == '(' || ch == '{' || ch == '[')
            push(ch);
        else if (ch == ')' || ch == '}' || ch == ']') {
            if (top == -1 || !isMatchingPair(pop(), ch))
                return 0; // unbalanced
        }
    }
    return (top == -1); // stack should be empty
}

int main() {
    char expr[100];
    printf("Enter expression: ");
    scanf("%s", expr);

    if (isBalanced(expr))
        printf("Expression is correctly parenthesized\n");
    else
        printf("Expression is NOT correctly parenthesized\n");

    return 0;
}
